version: "3"

networks:
  sonarqube-network:
    driver: bridge

volumes:
  postgres:
  postgres_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

services:
  postgres:
    image: ${POSTGRES_IMAGE_TAG}
    container_name: postgres
    restart: unless-stopped
    tty: true
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${SONARQUBE_DB_NAME}
      POSTGRES_USER: ${SONARQUBE_DB_USER}
      POSTGRES_PASSWORD: ${SONARQUBE_DB_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sonarqube-network
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "${SONARQUBE_DB_NAME}",
          "-U",
          "${SONARQUBE_DB_USER}",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s

  sonarqube:
    image: ${SONARQUBE_IMAGE_TAG}
    container_name: postgres-for-sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_USERNAME: ${SONARQUBE_DB_USER}
      SONAR_JDBC_PASSWORD: ${SONARQUBE_DB_PASSWORD}
      SONAR_JDBC_URL: ${SONARQUBE_DB_URL}
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - sonarqube-network
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    depends_on:
      postgres:
        condition: service_healthy
